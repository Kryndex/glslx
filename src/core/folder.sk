namespace GLSLX.Folder {
  def fold(node Node) Node {
    if RELEASE {
      return _fold(node)
    }

    # Run sanity checks in debug mode
    else {
      var folded = _fold(node)
      if folded != null && folded.kind != .UNKNOWN_CONSTANT {
        _check(folded)
      }
      return folded
    }
  }

  def _check(node Node) {
    switch node.kind {
      case .INT { assert(node.resolvedType == .INT && !node.hasChildren) }
      case .BOOL { assert(node.resolvedType == .BOOL && !node.hasChildren) }
      case .FLOAT { assert(node.resolvedType == .FLOAT && !node.hasChildren) }

      case .CALL {
        var target = node.callTarget
        assert(target.kind == .TYPE)
        assert(target.resolvedType == node.resolvedType)

        var componentType = target.resolvedType.componentType
        var componentCount = target.resolvedType.componentCount

        # Native component types
        if componentType != null {
          assert(node.childCount == 1 + componentCount)
          assert(
            target.resolvedType != .INT &&
            target.resolvedType != .BOOL &&
            target.resolvedType != .FLOAT)

          for child = target.nextSibling; child != null; child = child.nextSibling {
            assert(child.resolvedType == componentType)
            assert(child.kind != .CALL)
            _check(child)
          }
        }

        # User-defined structs
        else {
          var struct = target.resolvedType.symbol.asStruct
          var i = 0
          assert(node.childCount == 1 + struct.variables.count)

          for child = target.nextSibling; child != null; child = child.nextSibling {
            assert(child.resolvedType == struct.variables[i].type.resolvedType)
            _check(child)
            i++
          }
        }
      }

      default {
        assert(false)
      }
    }
  }

  def _fold(node Node) Node {
    switch node.kind {
      case .INT, .FLOAT, .BOOL {
        return node.clone
      }

      case .NAME {
        var symbol = node.symbol
        if symbol != null && symbol.isConst {
          if symbol.constantValue != null {
            return symbol.constantValue.clone
          }

          if symbol.asVariable.kind != .ARGUMENT {
            return Node.createUnknownConstant(node.resolvedType)
          }
        }
      }

      case .SEQUENCE {
        for child = node.firstChild; child != null; child = child.nextSibling {
          var folded = fold(child)

          if folded == null || child == node.lastChild {
            return folded
          }
        }
      }

      case .HOOK {
        var foldedTest = fold(node.hookTest)
        var foldedTrue = fold(node.hookTrue)
        var foldedFalse = fold(node.hookFalse)

        if foldedTest.kind == .BOOL && foldedTrue != null && foldedFalse != null {
          return foldedTest.asBool ? foldedTrue : foldedFalse
        }
      }

      case .DOT {
        var folded = fold(node.dotTarget)
        if folded != null && folded.kind == .CALL {
          var resolvedType = folded.resolvedType
          var name = node.asString

          # Evaluate a swizzle
          if resolvedType.isVector {
            var count = name.count
            var componentCount = resolvedType.componentCount

            # Find the swizzle set
            for set in Swizzle.strings(componentCount) {
              if name.get(0) in set {
                if count == 1 {
                  return folded.childAt(1 + set.indexOf(name))
                }
                var swizzleType = Swizzle.type(resolvedType.componentType, count)
                var result = Node.createCall(Node.createType(swizzleType)).withType(swizzleType)
                for i in 0..count {
                  result.appendChild(folded.childAt(1 + set.indexOf(name.get(i))).remove)
                }
                return result
              }
            }
          }

          # Evaluate a struct field
          else if resolvedType.symbol != null && resolvedType.symbol.isStruct {
            var symbol = resolvedType.symbol.asStruct
            var variables = symbol.variables
            assert(folded.childCount == 1 + variables.count)

            # Extract the field from the constructor call
            for i in 0..variables.count {
              var variable = variables[i]
              if variable.name == name {
                return folded.childAt(1 + i).remove
              }
            }
          }
        }
      }

      case .INDEX {
        var foldedLeft = fold(node.binaryLeft)
        var foldedRight = fold(node.binaryRight)

        # Both children must also be constants
        if foldedLeft != null && foldedLeft.kind == .CALL && foldedRight != null && foldedRight.kind == .INT {
          var type = foldedLeft.resolvedType
          if type.isVector {
            var indexCount = type.indexCount
            var index = foldedRight.asInt

            # The index must be in range
            if 0 <= index && index < indexCount {
              return foldedLeft.childAt(index + 1).remove
            }
          }

          # Indexing into a matrix creates a vector
          else if type.isMatrix {
            var indexCount = type.indexCount
            var index = foldedRight.asInt
            assert(foldedLeft.childCount == 1 + indexCount * indexCount)

            # The index must be in range
            if 0 <= index && index < indexCount {
              var indexType = type.indexType
              var result = Node.createCall(Node.createType(indexType)).withType(indexType)
              var before = foldedLeft.childAt(index * indexCount)
              for i in 0..indexCount {
                result.appendChild(before.nextSibling.remove)
              }
              return result
            }
          }
        }
      }

      case .CALL {
        var target = node.callTarget

        # Only constructor calls are considered constants
        if target.kind != .TYPE {
          return null
        }

        # Make sure all arguments are constants
        var type = target.resolvedType
        var componentType = type.componentType
        var arguments List<Node> = []
        for child = target.nextSibling; child != null; child = child.nextSibling {
          var folded = fold(child)
          if folded == null {
            return null
          }

          # Expand values inline from constructed native types
          if folded.kind == .CALL && componentType != null && folded.callTarget.resolvedType.componentType != null {
            for value = folded.callTarget.nextSibling; value != null; value = value.nextSibling {
              var casted = _castValue(componentType, value)
              if casted == null {
                return null
              }
              arguments.append(casted)
            }
          }

          # Auto-cast values for primitive types
          else {
            if componentType != null {
              folded = _castValue(componentType, folded)
              if folded == null {
                return null
              }
            }
            arguments.append(folded)
          }
        }

        if type.componentType != null {
          return _foldComponentConstructor(arguments, type)
        }

        if type.symbol != null && type.symbol.isStruct {
          return _foldStruct(arguments, type)
        }
      }

      case .NEGATIVE { return _foldUnaryFloatOrInt(node, x => -x, x => -x) }
      case .NOT { return _foldUnaryBool(node, x => !x) }
      case .POSITIVE { return _foldUnaryFloatOrInt(node, x => +x, x => +x) }

      case .ADD { return _foldBinaryFloatOrInt(node, (a, b) => a + b, (a, b) => a + b) }
      case .SUBTRACT { return _foldBinaryFloatOrInt(node, (a, b) => a - b, (a, b) => a - b) }
      case .MULTIPLY { return _foldBinaryFloatOrInt(node, (a, b) => a * b, (a, b) => a * b) }
      case .DIVIDE { return _foldBinaryFloatOrInt(node, (a, b) => b != 0 ? a / b : 0, (a, b) => b != 0 ? a / b : 0) }

      case .EQUAL, .NOT_EQUAL { return _foldBinaryEquality(node) }

      case .LOGICAL_AND { return _foldBinaryBool(node, (a, b) => a && b) }
      case .LOGICAL_OR { return _foldBinaryBool(node, (a, b) => a || b) }
      case .LOGICAL_XOR { return _foldBinaryBool(node, (a, b) => a != b) }

      case .GREATER_THAN { return _foldBinaryFloatOrIntToBool(node, (a, b) => a > b) }
      case .GREATER_THAN_OR_EQUAL { return _foldBinaryFloatOrIntToBool(node, (a, b) => a >= b) }
      case .LESS_THAN { return _foldBinaryFloatOrIntToBool(node, (a, b) => a < b) }
      case .LESS_THAN_OR_EQUAL { return _foldBinaryFloatOrIntToBool(node, (a, b) => a <= b) }
    }

    return null
  }

  def _castValue(type Type, node Node) Node {
    var value double

    switch node.kind {
      case .BOOL { value = node.asBool as double }
      case .INT { value = node.asInt }
      case .FLOAT { value = node.asFloat }
      default { return null }
    }

    switch type {
      case .BOOL { return Node.createBool(value as bool) }
      case .INT { return Node.createInt(value as int) }
      case .FLOAT { return Node.createFloat(value) }
    }

    return null
  }

  def _foldComponentConstructor(arguments List<Node>, type Type) Node {
    var componentCount = type.componentCount
    var componentType = type.componentType
    var node = Node.createCall(Node.createType(type)).withType(type)
    assert(componentCount > 0)

    # Passing a single argument always works
    if arguments.count == 1 {
      var argument = arguments.first
      if argument.resolvedType != componentType {
        return null
      }
      for i in 0..componentCount {
        node.appendChild(argument.clone)
      }
    }

    # Multiple arguments are more involved
    else {
      # Extra arguments are ignored
      if arguments.count < componentCount {
        return null
      }

      # The constructed value is represented as a constructor call
      for i in 0..componentCount {
        if arguments[i].resolvedType != componentType {
          return null
        }

        node.appendChild(arguments[i])
      }
    }

    # Don't wrap primitive types
    if type.indexType == null {
      return node.lastChild.remove
    }

    return node
  }

  def _foldStruct(arguments List<Node>, type Type) Node {
    var variables = type.symbol.asStruct.variables
    var node = Node.createCall(Node.createType(type)).withType(type)

    # Structs can only be constructed with the exact number of arguments
    if arguments.count != variables.count {
      return null
    }

    # The constructed value is represented as a constructor call
    for i in 0..arguments.count {
      if arguments[i].resolvedType != variables[i].type.resolvedType {
        return null
      }

      node.appendChild(arguments[i])
    }

    return node
  }

  def _foldBinaryEquality(node Node) Node {
    var left = fold(node.binaryLeft)
    var right = fold(node.binaryRight)

    if left != null && right != null {
      var value = left.looksTheSameAs(right)
      return Node.createBool(node.kind == .EQUAL ? value : !value)
    }

    return null
  }

  ################################################################################

  def _foldComponentwiseBinary(node Node, componentType Type, argumentKind NodeKind, op fn(Node) Node) Node {
    if node.kind == .CALL && node.callTarget.kind == .TYPE && node.callTarget.resolvedType.componentType == componentType {
      var result = Node.createCall(node.callTarget.clone).withType(node.callTarget.resolvedType)

      for child = node.callTarget.nextSibling; child != null; child = child.nextSibling {
        var folded = fold(child)
        if folded == null || folded.kind != argumentKind {
          return null
        }
        result.appendChild(op(folded))
      }

      return result
    }

    return null
  }

  def _foldFloat(node Node, op fn(double) double) Node {
    if node.kind == .FLOAT {
      return Node.createFloat(op(node.asFloat))
    }

    return _foldComponentwiseBinary(node, .FLOAT, .FLOAT, x => Node.createFloat(op(x.asFloat)))
  }

  def _foldInt(node Node, op fn(int) int) Node {
    if node.kind == .INT {
      return Node.createInt(op(node.asInt))
    }

    return _foldComponentwiseBinary(node, .INT, .INT, x => Node.createInt(op(x.asInt)))
  }

  ################################################################################

  def _foldComponentwiseBinary(left Node, right Node, componentType Type, argumentKind NodeKind, op fn(Node, Node) Node) Node {
    if left.kind == .CALL && left.callTarget.kind == .TYPE && left.callTarget.resolvedType.componentType == componentType &&
        right.kind == .CALL && right.callTarget.kind == .TYPE && right.callTarget.resolvedType == left.callTarget.resolvedType {
      var result = Node.createCall(left.callTarget.clone).withType(left.callTarget.resolvedType)
      var leftChild = left.callTarget.nextSibling
      var rightChild = right.callTarget.nextSibling

      while leftChild != null && rightChild != null {
        var foldedLeft = fold(leftChild)
        var foldedRight = fold(rightChild)

        if foldedLeft == null || foldedLeft.kind != argumentKind ||
            foldedRight == null || foldedRight.kind != argumentKind {
          return null
        }

        result.appendChild(op(foldedLeft, foldedRight))
        leftChild = leftChild.nextSibling
        rightChild = rightChild.nextSibling
      }

      if leftChild == null && rightChild == null {
        return result
      }
    }

    return null
  }

  def _foldFloat(left Node, right Node, op fn(double, double) double) Node {
    if left.kind == .FLOAT && right.kind == .FLOAT {
      return Node.createFloat(op(left.asFloat, right.asFloat))
    }

    return _foldComponentwiseBinary(left, right, .FLOAT, .FLOAT, (a, b) => Node.createFloat(op(a.asFloat, b.asFloat)))
  }

  def _foldInt(left Node, right Node, op fn(int, int) int) Node {
    if left.kind == .INT && right.kind == .INT {
      return Node.createInt(op(left.asInt, right.asInt))
    }

    return _foldComponentwiseBinary(left, right, .INT, .INT, (a, b) => Node.createInt(op(a.asInt, b.asInt)))
  }

  ################################################################################

  def _foldUnaryBool(node Node, op fn(bool) bool) Node {
    var value = fold(node.unaryValue)

    if value != null && value.kind == .BOOL {
      return Node.createBool(op(value.asBool))
    }

    return null
  }

  def _foldUnaryFloatOrInt(node Node, floatOp fn(double) double, intOp fn(int) int) Node {
    var value = fold(node.unaryValue)

    if value != null {
      return
        _foldFloat(value, floatOp) ??
        _foldInt(value, intOp)
    }

    return null
  }

  ################################################################################

  def _foldBinaryBool(node Node, op fn(bool, bool) bool) Node {
    var left = fold(node.binaryLeft)
    var right = fold(node.binaryRight)

    if left != null && right != null && left.kind == .BOOL && right.kind == .BOOL {
      return Node.createBool(op(left.asBool, right.asBool))
    }

    return null
  }

  def _foldBinaryFloatOrInt(node Node, floatOp fn(double, double) double, intOp fn(int, int) int) Node {
    var left = fold(node.binaryLeft)
    var right = fold(node.binaryRight)

    if left != null && right != null {
      return
        _foldFloat(left, right, floatOp) ??
        _foldInt(left, right, intOp)
    }

    return null
  }

  def _foldBinaryFloatOrIntToBool(node Node, op fn(double, double) bool) Node {
    var left = fold(node.binaryLeft)
    var right = fold(node.binaryRight)

    # The comparison operators only work on scalars in GLSL. To do comparisons
    # on vectors, the functions greaterThan(), lessThan(), greaterThanEqual(),
    # and lessThanEqual() must be used.
    if left != null && right != null {
      if left.kind == .FLOAT && right.kind == .FLOAT {
        return Node.createBool(op(left.asFloat, right.asFloat))
      }

      if left.kind == .INT && right.kind == .INT {
        return Node.createBool(op(left.asInt, right.asInt))
      }
    }

    return null
  }
}
