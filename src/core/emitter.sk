namespace GLSLX.Emitter {
  def emit(global Node, options CompilerOptions) string {
    return Emitter.new(global, options).toString
  }

  def _shouldSeparateWithExtraNewline(before Node, after Node) bool {
    return _isFunctionWithBlock(before) || _isFunctionWithBlock(after) || before.kind != after.kind && (
      before.kind == .PRECISION || after.kind == .PRECISION ||
      before.kind == .EXTENSION || after.kind == .EXTENSION)
  }

  def _isFunctionWithBlock(node Node) bool {
    return node.kind == .FUNCTION && node.symbol.asFunction.block != null
  }
}

class GLSLX.Emitter {
  var _code = ""
  var _indent = ""
  var _newline = "\n"
  var _space = " "
  var _removeWhitespace = false

  def new(node Node, options CompilerOptions) {
    _removeWhitespace = options.removeWhitespace

    if _removeWhitespace {
      _space = ""
      _newline = ""
    }

    var previous Node = null
    for child = node.firstChild; child != null; child = child.nextSibling {
      if _isImportedNode(child) {
        continue
      }

      if previous != null && _shouldSeparateWithExtraNewline(previous, child) {
        _emit(_newline)
      }

      _emit(child)
      _emit(_newline)
      previous = child
    }
  }

  def _isImportedNode(node Node) bool {
    switch node.kind {
      case .FUNCTION, .STRUCT { return .IMPORTED in node.symbol.flags }
      case .VARIABLES { return .IMPORTED in node.variablesFlags }
      default { return false }
    }
  }

  def _increaseIndent {
    if !_removeWhitespace {
      _indent += "  "
    }
  }

  def _decreaseIndent {
    if !_removeWhitespace {
      _indent = _indent.slice(2)
    }
  }

  def _emitFlags(flags SymbolFlags) {
    if .ATTRIBUTE in flags { _emit("attribute ") }
    if .CONST in flags { _emit("const ") }
    if .UNIFORM in flags { _emit("uniform ") }
    if .VARYING in flags { _emit("varying ") }

    if .HIGHP in flags { _emit("highp ") }
    if .LOWP in flags { _emit("lowp ") }
    if .MEDIUMP in flags { _emit("mediump ") }

    if .IN in flags { _emit("in ") }
    if .INOUT in flags { _emit("inout ") }
    if .OUT in flags { _emit("out ") }
  }

  def _emit(node Node) {
    assert(node.kind.isStatement)

    switch node.kind {
      case .BLOCK {
        if !node.hasChildren && node.parent != null {
          _emit(";")
        } else {
          _emit("{" + _newline)
          _increaseIndent
          for child = node.firstChild; child != null; child = child.nextSibling {
            _emit(_indent)
            _emit(child)
            _emit(_newline)
          }
          _decreaseIndent
          _emit(_indent + "}")
        }
      }

      case .BREAK {
        _emit("break;")
      }

      case .CONTINUE {
        _emit("continue;")
      }

      case .DISCARD {
        _emit("discard;")
      }

      case .DO_WHILE {
        _emit("do")
        _emitBody(node.doWhileBody, .AFTER_KEYWORD)
        _emit(_newline + _indent + "while" + _space + "(")
        _emit(node.doWhileTest, .LOWEST)
        _emit(");")
      }

      case .EXPRESSION {
        _emit(node.expressionValue, .LOWEST)
        _emit(";")
      }

      case .EXTENSION {
        _emitNewlineBeforePragma
        _emit("#extension " + node.extensionName + _space + ":" + _space)
        switch node.extensionBehavior {
          case .DISABLE { _emit("disable") }
          case .ENABLE { _emit("enable") }
          case .REQUIRE { _emit("require") }
          case .WARN { _emit("warn") }
        }
        _emitNewlineAfterPragma
      }

      case .FOR {
        _emit("for" + _space + "(")
        if node.forSetup != null {
          if node.forSetup.kind == .VARIABLES {
            _emit(node.forSetup)
          } else {
            _emit(node.forSetup, .LOWEST)
            _emit(";")
          }
        } else {
          _emit(";")
        }
        if node.forTest != null {
          _emit(_space)
          _emit(node.forTest, .LOWEST)
        }
        _emit(";")
        if node.forUpdate != null {
          _emit(_space)
          _emit(node.forUpdate, .LOWEST)
        }
        _emit(")")
        _emitBody(node.forBody, .AFTER_PARENTHESIS)
      }

      case .FUNCTION {
        var function = node.symbol as FunctionSymbol
        _emitFlags(function.flags)
        _emit(function.returnType, .LOWEST)
        _emit(" ")
        _emit(function.name)
        _emit("(")
        for argument in function.arguments {
          if argument != function.arguments.first {
            _emit("," + _space)
          }
          _emitFlags(argument.flags)
          _emit(argument.type, .LOWEST)
          _emit(" ")
          _emit(argument)
        }
        _emit(")")
        if function.block != null {
          _emit(_space)
          _emit(function.block)
        } else {
          _emit(";")
        }
      }

      case .IF {
        _emit("if" + _space + "(")
        _emit(node.ifTest, .LOWEST)
        _emit(")")
        _emitBody(node.ifTrue, .AFTER_PARENTHESIS)
        if node.ifFalse != null {
          _emit(_newline + _indent + "else")
          if node.ifFalse.kind == .IF {
            _emit(" ")
            _emit(node.ifFalse)
          } else {
            _emitBody(node.ifFalse, .AFTER_KEYWORD)
          }
        }
      }

      case .PRECISION {
        _emit("precision ")
        _emitFlags(node.precisionFlag)
        _emit(node.precisionType, .LOWEST)
        _emit(";")
      }

      case .RETURN {
        var value = node.returnValue
        _emit("return")
        if value != null {
          if !value.kind.isUnaryPrefix {
            _emit(" ")
          }
          _emit(value, .LOWEST)
        }
        _emit(";")
      }

      case .STRUCT {
        var symbol = node.symbol.asStruct
        _emitFlags(symbol.flags)
        _emit("struct " + symbol.name + _space + "{" + _newline)
        _increaseIndent
        for child = node.firstChild; child != null; child = child.nextSibling {
          _emit(_indent)
          _emit(child)
          _emit(_newline)
        }
        _decreaseIndent
        _emit(_indent + "};")
      }

      case .VARIABLES {
        _emitFlags(node.variablesFlags)
        _emit(node.variablesType, .LOWEST)
        for child = node.variablesType.nextSibling; child != null; child = child.nextSibling {
          var variable = child.symbol as VariableSymbol
          _emit(child.previousSibling.previousSibling == null ? " " : "," + _space)
          _emit(variable)
        }
        _emit(";")
      }

      case .VERSION {
        _emitNewlineBeforePragma
        _emit("#version " + node.versionNumber.toString)
        _emitNewlineAfterPragma
      }

      case .WHILE {
        _emit("while" + _space + "(")
        _emit(node.whileTest, .LOWEST)
        _emit(")")
        _emitBody(node.whileBody, .AFTER_PARENTHESIS)
      }

      default {
        _emit(node.kind.toString)
      }
    }
  }

  def _emitNewlineBeforePragma {
    if _code != "" && !_code.endsWith("\n") {
      _emit("\n")
    }
  }

  def _emitNewlineAfterPragma {
    if _removeWhitespace {
      _emit("\n")
    }
  }

  enum After {
    AFTER_KEYWORD
    AFTER_PARENTHESIS
  }

  def _emitBody(node Node, after After) {
    if node.kind == .BLOCK {
      _emit(_space)
      _emit(node)
    } else {
      _emit(_removeWhitespace && after == .AFTER_KEYWORD ? " " : _newline)
      _increaseIndent
      _emit(_indent)
      _emit(node)
      _decreaseIndent
    }
  }

  def _emitCommaSeparatedExpressions(node Node) {
    for child = node; child != null; child = child.nextSibling {
      if child != node {
        _emit("," + _space)
      }
      _emit(child, .COMMA)
    }
  }

  def _emit(variable VariableSymbol) {
    _emit(variable.name)
    if variable.arraySize != null {
      _emit("[")
      _emit(variable.arraySize, .LOWEST)
      _emit("]")
    }
    if variable.value != null {
      _emit(_space + "=" + _space)
      _emit(variable.value, .COMMA)
    }
  }

  def _emit(node Node, precedence Precedence) {
    assert(node.kind.isExpression)

    switch node.kind {
      case .CALL {
        _emit(node.callTarget, .UNARY_POSTFIX)
        _emit("(")
        _emitCommaSeparatedExpressions(node.callTarget.nextSibling)
        _emit(")")
      }

      case .DOT {
        _emit(node.dotTarget, .MEMBER)
        _emit(".")
        _emit(node.symbol != null ? node.symbol.name : node.asString)
      }

      case .HOOK {
        if Precedence.ASSIGN as int < precedence as int {
          _emit("(")
        }
        _emit(node.hookTest, .LOGICAL_OR)
        _emit(_space + "?" + _space)
        _emit(node.hookTrue, .ASSIGN)
        _emit(_space + ":" + _space)
        _emit(node.hookFalse, .ASSIGN)
        if Precedence.ASSIGN as int < precedence as int {
          _emit(")")
        }
      }

      case .NAME {
        _emit(node.symbol.name)
      }

      case .SEQUENCE {
        if Precedence.COMMA as int <= precedence as int {
          _emit("(")
        }
        _emitCommaSeparatedExpressions(node.firstChild)
        if Precedence.COMMA as int <= precedence as int {
          _emit(")")
        }
      }

      case .TYPE {
        _emit(node.resolvedType.rootType.symbol.name)
      }

      case .BOOL {
        _emit(node.asBool.toString)
      }

      case .FLOAT {
        var value = node.asFloat
        var text = value.toString

        # Check to see if exponential form is smaller
        var exponential string = (value as dynamic).toExponential()
        if exponential.count < text.count {
          text = exponential
        }

        # Strip off the exponent
        var e = text.indexOf("e")
        var exponent = ""
        if e != -1 {
          exponent = text.slice(e)
          text = text.slice(0, e)
        }

        # 32-bit floating point only needs six digits
        text = (+((+(text as dynamic)).toFixed(6))).toString()

        # Make sure there's a dot if there isn't an exponent
        if exponent == "" && !("." in text) {
          text += _removeWhitespace ? "." : ".0"
        }

        # Strip the leading zero
        if _removeWhitespace && text.startsWith("0.") && text != "0." {
          text = text.slice(1)
        }

        # Strip the leading zero with a minus sign
        if _removeWhitespace && text.startsWith("-0.") && text != "-0." {
          text = "-" + text.slice(2)
        }

        # Put the exponent back
        _emit(text + exponent)
      }

      case .INT {
        _emit(node.asInt.toString)
      }

      case .INDEX {
        _emit(node.binaryLeft, .MEMBER)
        _emit("[")
        _emit(node.binaryRight, .LOWEST)
        _emit("]")
      }

      case .COMPLEMENT { _emitUnaryPrefix("~", node, precedence) }
      case .NEGATIVE { _emitUnaryPrefix("-", node, precedence) }
      case .NOT { _emitUnaryPrefix("!", node, precedence) }
      case .POSITIVE { _emitUnaryPrefix("+", node, precedence) }

      case .PREFIX_DECREMENT { _emitUnaryPrefix("--", node, precedence) }
      case .PREFIX_INCREMENT { _emitUnaryPrefix("++", node, precedence) }

      case .POSTFIX_DECREMENT { _emitUnaryPostfix("--", node, precedence) }
      case .POSTFIX_INCREMENT { _emitUnaryPostfix("++", node, precedence) }

      case .ADD { _emitBinary("+", node, precedence, .ADD) }
      case .BITWISE_AND { _emitBinary("&", node, precedence, .BITWISE_AND) }
      case .BITWISE_OR { _emitBinary("|", node, precedence, .BITWISE_OR) }
      case .BITWISE_XOR { _emitBinary("^", node, precedence, .BITWISE_XOR) }
      case .DIVIDE { _emitBinary("/", node, precedence, .MULTIPLY) }
      case .EQUAL { _emitBinary("==", node, precedence, .COMPARE) }
      case .GREATER_THAN { _emitBinary(">", node, precedence, .COMPARE) }
      case .GREATER_THAN_OR_EQUAL { _emitBinary(">=", node, precedence, .COMPARE) }
      case .LESS_THAN { _emitBinary("<", node, precedence, .COMPARE) }
      case .LESS_THAN_OR_EQUAL { _emitBinary("<=", node, precedence, .COMPARE) }
      case .LOGICAL_AND { _emitBinary("&&", node, precedence, .LOGICAL_AND) }
      case .LOGICAL_OR { _emitBinary("||", node, precedence, .LOGICAL_OR) }
      case .LOGICAL_XOR { _emitBinary("^^", node, precedence, .LOGICAL_XOR) }
      case .MULTIPLY { _emitBinary("*", node, precedence, .MULTIPLY) }
      case .NOT_EQUAL { _emitBinary("!=", node, precedence, .COMPARE) }
      case .REMAINDER { _emitBinary("%", node, precedence, .MULTIPLY) }
      case .SHIFT_LEFT { _emitBinary("<<", node, precedence, .SHIFT) }
      case .SHIFT_RIGHT { _emitBinary(">>", node, precedence, .SHIFT) }
      case .SUBTRACT { _emitBinary("-", node, precedence, .ADD) }

      case .ASSIGN { _emitBinary("=", node, precedence, .ASSIGN) }
      case .ASSIGN_ADD { _emitBinary("+=", node, precedence, .ASSIGN) }
      case .ASSIGN_BITWISE_AND { _emitBinary("&=", node, precedence, .ASSIGN) }
      case .ASSIGN_BITWISE_OR { _emitBinary("|=", node, precedence, .ASSIGN) }
      case .ASSIGN_BITWISE_XOR { _emitBinary("^=", node, precedence, .ASSIGN) }
      case .ASSIGN_DIVIDE { _emitBinary("/=", node, precedence, .ASSIGN) }
      case .ASSIGN_MULTIPLY { _emitBinary("*=", node, precedence, .ASSIGN) }
      case .ASSIGN_REMAINDER { _emitBinary("%=", node, precedence, .ASSIGN) }
      case .ASSIGN_SHIFT_LEFT { _emitBinary("<<=", node, precedence, .ASSIGN) }
      case .ASSIGN_SHIFT_RIGHT { _emitBinary(">>=", node, precedence, .ASSIGN) }
      case .ASSIGN_SUBTRACT { _emitBinary("-=", node, precedence, .ASSIGN) }

      default {
        _emit(node.kind.toString)
      }
    }
  }

  def _emitUnaryPrefix(operator string, node Node, precedence Precedence) {
    var value = node.unaryValue
    var kind = value.kind

    _emit(operator)

    if operator[0] == '-' && (kind == .NEGATIVE || kind == .PREFIX_DECREMENT || value.isNumberLessThanZero) ||
        operator[0] == '+' && (kind == .POSITIVE || kind == .PREFIX_INCREMENT) {
      _emit(" ")
    }

    _emit(value, .UNARY_PREFIX)
  }

  def _emitUnaryPostfix(operator string, node Node, precedence Precedence) {
    _emit(node.unaryValue, .UNARY_POSTFIX)
    _emit(operator)
  }

  def _emitBinary(operator string, node Node, outer Precedence, inner Precedence) {
    var isRightAssociative = node.kind.isBinaryAssign
    if inner as int < outer as int {
      _emit("(")
    }
    _emit(node.binaryLeft, ((inner as int) + (isRightAssociative as int)) as Precedence)
    _emit(_space + operator + _space)
    _emit(node.binaryRight, ((inner as int) + (!isRightAssociative as int)) as Precedence)
    if inner as int < outer as int {
      _emit(")")
    }
  }

  def _emit(text string) {
    _code += text
  }

  def toString string {
    return _code
  }
}
