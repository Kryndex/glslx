namespace GLSLX {
  enum DiagnosticKind {
    ERROR
    WARNING
  }

  class Diagnostic {
    var kind DiagnosticKind
    var range Range
    var text string
    var noteRange Range = null
    var noteText = ""
  }

  namespace Diagnostic {
    def format(kind string, range Range, text string) string {
      if range == null {
        return kind + ": " + text + "\n"
      }
      var formatted = range.format(0)
      return range.locationString + ": " + kind + ": " + text + "\n" + formatted.line + "\n" + formatted.range + "\n"
    }
  }

  class Log {
    var diagnostics List<Diagnostic> = []
    var warningCount = 0
    var errorCount = 0

    def toString string {
      var builder = StringBuilder.new

      # Emit the log assuming an infinite terminal width
      for diagnostic in diagnostics {
        builder.append(Diagnostic.format(diagnostic.kind == .ERROR ? "error" : "warning", diagnostic.range, diagnostic.text))

        # Append notes after the diagnostic they apply to
        if diagnostic.noteRange != null {
          builder.append(Diagnostic.format("note", diagnostic.noteRange, diagnostic.noteText))
        }
      }

      return builder.toString
    }

    def isEmpty bool {
      return diagnostics.isEmpty
    }

    def hasErrors bool {
      return errorCount != 0
    }

    def hasWarnings bool {
      return warningCount != 0
    }

    def error(range Range, text string) {
      diagnostics.append(Diagnostic.new(.ERROR, range, text))
      errorCount++
    }

    def warning(range Range, text string) {
      diagnostics.append(Diagnostic.new(.WARNING, range, text))
      warningCount++
    }

    def note(range Range, text string) {
      var last = diagnostics.last
      last.noteRange = range
      last.noteText = text
    }
  }

  class Log {
    def syntaxWarningUnknownExtension(range Range, name string) {
      warning(range, "The extension \"" + name + "\" is not in the known list of valid WebGL extensions")
    }

    def syntaxErrorDisabledExtension(range Range, name string, extension string) {
      error(range, "Cannot use \"" + name + "\" from disabled extension \"" + extension + "\"")
    }

    def syntaxErrorExtraData(range Range, text string) {
      error(range, "Syntax error \"" + text + "\"")
    }

    def syntaxErrorReservedWord(range Range) {
      error(range, "\"" + range.toString + "\" is a reserved word")
    }

    def syntaxErrorUnexpectedToken(token Token) {
      error(token.range, "Unexpected " + token.kind.toString)
    }

    def syntaxErrorExpectedToken(range Range, expected TokenKind) {
      error(range, "Expected " + expected.toString)
    }

    def syntaxErrorExpectedToken(range Range, found TokenKind, expected TokenKind) {
      error(range, "Expected " + expected.toString + " but found " + found.toString)
    }

    def syntaxErrorBadSymbolReference(range Range) {
      error(range, "There is no symbol called \"" + range.toString + "\" in the current scope")
    }

    def syntaxErrorDuplicateSymbolDefinition(range Range, previous Range) {
      error(range, "There is already a symbol called \"" + range.toString + "\" in the current scope")
      note(previous, "The previous definition of \"" + previous.toString + "\" is here")
    }

    def syntaxErrorOutsideLoop(range Range) {
      error(range, "This statement cannot be used outside a loop")
    }

    def syntaxErrorStructVariableInitializer(range Range) {
      error(range, "Cannot initialize struct variables")
    }

    def syntaxErrorInsideStruct(range Range) {
      error(range, "This statement cannot be used inside a struct")
    }

    def syntaxErrorInsideFunction(range Range) {
      error(range, "This statement cannot be used inside a function")
    }

    def syntaxErrorOutsideFunction(range Range) {
      error(range, "This statement cannot be used outside a function")
    }

    def syntaxErrorDifferentReturnType(range Range, name string, type Type, expected Type, previous Range) {
      error(range, "Cannot change the return type of \"" + name + "\" to type \"" + type.toString + "\"")
      note(previous, "The forward declaration of \"" + name + "\" has a return type of \"" + expected.toString + "\"")
    }

    def syntaxErrorBadQualifier(range Range) {
      error(range, "Cannot use this qualifier here")
    }
  }

  class Log {
    def semanticErrorBadConversion(range Range, from Type, to Type) {
      error(range, "Cannot convert from type \"" + from.toString + "\" to type \"" + to.toString + "\"")
    }

    def semanticErrorUnexpectedType(range Range, type Type) {
      error(range, "Unexpected type \"" + type.toString + "\"")
    }

    def semanticErrorBadVariableType(range Range, type Type) {
      error(range, "Cannot create a variable of type \"" + type.toString + "\"")
    }

    def semanticErrorBadMember(range Range, type Type, name string) {
      error(range, "Cannot find \"" + name + "\" on type \"" + type.toString + "\"")
    }

    def semanticErrorBadSwizzle(range Range, type Type, name string) {
      error(range, "Invalid swizzle \"" + name + "\" on type \"" + type.toString + "\"")
    }

    def semanticErrorBadSwizzleAssignment(range Range, field string) {
      error(range, "The field \"" + field + "\" cannot be specified multiple times when used as a storage location")
    }

    def semanticErrorMustCallFunction(range Range, name string) {
      error(range, "The function \"" + name + "\" must be called")
    }

    def semanticErrorBadCall(range Range, type Type) {
      error(range, "Cannot call type \"" + type.toString + "\"")
    }

    def semanticErrorBadConstructorValue(range Range, type Type, constructor Type) {
      error(range, "Cannot use value of type \"" + type.toString + "\" when constructing type \"" + constructor.toString + "\"")
    }

    def semanticErrorBadConstructorCount(range Range, type Type, count int) {
      error(range, "Cannot construct type \"" + type.toString + "\" with " + count.toString + " value" + plural(count))
    }

    def semanticErrorArgumentCountFunction(range Range, expected int, found int, name string, function Range) {
      error(range, "Expected " + expected.toString + " argument" + plural(expected) + " but found " +
        found.toString + " argument" + plural(found) + " when calling function \"" + name + "\"")
      if function != null {
        note(function, "The definition of function \"" + name + "\" is here")
      }
    }

    def semanticErrorArgumentCountConstructor(range Range, expected int, found int, name string, struct Range) {
      error(range, "Expected " + expected.toString + " argument" + plural(expected) + " but found " +
        found.toString + " argument" + plural(found) + " when constructing type \"" + name + "\"")
      if struct != null {
        note(struct, "The definition of struct \"" + name + "\" is here")
      }
    }

    def semanticErrorBadOverloadMatch(range Range, name string) {
      error(range, "No matching overload for function \"" + name + "\"")
    }

    def semanticErrorBadHookTypes(range Range, left Type, right Type) {
      error(range, "Cannot merge type \"" + left.toString + "\" and type \"" + right.toString + "\"")
    }

    def semanticErrorBadUnary(range Range, operator string, type Type) {
      error(range, "No unary operator \"" + operator + "\" for type \"" + type.toString + "\"")
    }

    def semanticErrorBadBinary(range Range, operator string, left Type, right Type) {
      error(range, "No binary operator \"" + operator + "\" for type \"" + left.toString + "\" and type \"" + right.toString + "\"")
    }

    def semanticErrorBadStorage(range Range) {
      error(range, "Cannot store to this location")
    }

    def semanticErrorUninitializedConstant(range Range) {
      error(range, "Constants must be initialized")
    }
  }

  namespace Log {
    def plural(value int) string {
      return value != 1 ? "s" : ""
    }
  }
}
