namespace GLSLX.IDE {
  def constantValueToString(node Node) string {
    switch node.kind {
      case .INT { return node.asInt.toString }
      case .BOOL { return node.asBool.toString }
      case .FLOAT { return Emitter.floatToString(node.asFloat, .NORMAL) }

      case .CALL {
        assert(node.callTarget.kind == .TYPE)
        assert(node.callTarget.resolvedType == node.resolvedType)
        var callTarget = node.callTarget
        var text = "\(node.resolvedType)("
        for child = callTarget.nextSibling; child != null; child = child.nextSibling {
          if child.previousSibling != callTarget {
            text += ", "
          }
          text += constantValueToString(child)
        }
        return text + ")"
      }
    }

    return null
  }

  class SymbolQuery {
    const source Source
    const index int

    var resolvedType Type = null
    var symbol Symbol = null
    var range Range = null
    var swizzleName string = null
    var swizzleType Type = null

    def generateTooltip string {
      if swizzleName != null {
        return "\(swizzleType) \(swizzleName);"
      }

      if symbol != null {
        if symbol.isStruct {
          var struct = symbol.asStruct
          var text = "\(struct.flags)struct \(symbol.name)"

          if !struct.isNative {
            text += " {\n"
            for variable in struct.variables {
              text += "  \(_variableText(variable));\n"
            }
            text += "}"
          }

          return text + ";"
        }

        if symbol.isVariable {
          var variable = symbol.asVariable
          var text = _variableText(variable)

          if variable.constantValue != null {
            var constantValue = constantValueToString(variable.constantValue)
            if constantValue != null {
              text += " = " + constantValue
            }
          }

          return text + ";"
        }

        if symbol.isFunction {
          var function = symbol.asFunction
          var text = "\(function.flags)\(function.returnType.resolvedType) \(symbol.name)("

          for argument in function.arguments {
            if argument != function.arguments.first {
              text += ", "
            }
            text += _variableText(argument)
          }

          return text + ");"
        }

        assert(false)
      }

      return null
    }

    def run(global Node) {
      _visit(global)
    }

    def _touches(range Range) bool {
      return range.source == source && range.touches(index)
    }

    def _visitSymbol(query Symbol) bool {
      if _touches(query.range) {
        resolvedType = query.resolvedType
        symbol = query
        range = query.range
        return true
      }

      return false
    }

    def _visitVariable(variable VariableSymbol) bool {
      return _visitSymbol(variable) || _visit(variable.type) || _visit(variable.arrayCount) || _visit(variable.value)
    }

    def _visitFunction(function FunctionSymbol) bool {
      for argument in function.arguments {
        if _visitVariable(argument) {
          return true
        }
      }
      return _visitSymbol(function) || _visit(function.returnType) || _visit(function.block)
    }

    def _visitStruct(struct StructSymbol) bool {
      for variable in struct.variables {
        if _visitVariable(variable) {
          return true
        }
      }
      return _visitSymbol(struct)
    }

    def _visit(node Node) bool {
      if node == null {
        return false
      }

      for child = node.firstChild; child != null; child = child.nextSibling {
        if _visit(child) {
          return true
        }
      }

      switch node.kind {
        case .NAME {
          if _touches(node.range) {
            resolvedType = node.resolvedType
            symbol = node.symbol
            range = node.range
            return true
          }
        }

        case .TYPE {
          if _touches(node.range) {
            resolvedType = node.resolvedType
            symbol = (resolvedType.isArrayOf ?? resolvedType).symbol
            range = node.range
            return true
          }
        }

        case .DOT {
          if _touches(node.internalRange) {
            resolvedType = node.resolvedType
            if node.dotTarget.resolvedType.isVector {
              swizzleName = node.asString
              swizzleType = node.resolvedType
            } else {
              symbol = node.symbol
            }
            range = node.internalRange
            return true
          }
        }

        case .VARIABLE {
          return _visitVariable(node.symbol.asVariable)
        }

        case .FUNCTION {
          return _visitFunction(node.symbol.asFunction)
        }

        case .STRUCT {
          return _visitStruct(node.symbol.asStruct)
        }
      }

      return false
    }
  }

  namespace SymbolQuery {
    def _variableText(variable VariableSymbol) string {
      var type = variable.type.resolvedType
      var text = "\(variable.flags)\(type.isArrayOf ?? type) \(variable.name)"
      if type.isArrayOf != null {
        text += type.arrayCount != 0 ? "[\(type.arrayCount)]" : "[]"
      }
      return text
    }
  }

  class SymbolsQuery {
    const source Source
    const symbols List<Symbol> = []

    def run(global Node) {
      _visit(global)
    }

    def _visit(node Node) {
      switch node.kind {
        case .STRUCT, .FUNCTION {
          _collectSymbol(node.symbol)
        }

        case .VARIABLES {
          for child = node.variablesType.nextSibling; child != null; child = child.nextSibling {
            assert(child.kind == .VARIABLE)
            _collectSymbol(child.symbol)
          }
        }

        case .GLOBAL {
          for child = node.firstChild; child != null; child = child.nextSibling {
            _visit(child)
          }
        }
      }
    }

    def _collectSymbol(symbol Symbol) {
      if symbol.range != null && symbol.range.source == source {
        symbols.append(symbol)
      }
    }
  }

  class RenameQuery {
    const source Source
    const index int
    const ranges List<Range> = []
    var symbol Symbol = null

    def run(global Node) {
      var query = SymbolQuery.new(source, index)
      query.run(global)
      symbol = query.symbol

      if symbol != null {
        _visit(global)

        # Remove overlapping ranges just in case
        var current Range = null
        ranges.sort((a, b) => a.source == b.source
          ? a.start <=> b.start
          : a.source.name <=> b.source.name)
        ranges.removeIf(range => {
          var previous = current
          current = range
          return previous != null && current.overlaps(previous)
        })
      }
    }

    def _appendRange(range Range, check Symbol) {
      # Sanity check the range to make sure it contains the target name
      if check == symbol && range != null && range.toString == symbol.name {
        ranges.append(range)
      }
    }

    def _visitVariable(variable VariableSymbol) {
      _appendRange(variable.range, variable)
      _visit(variable.type)
      _visit(variable.arrayCount)
      _visit(variable.value)
    }

    def _visitFunction(function FunctionSymbol) {
      _appendRange(function.range, function)
      _appendRange(function.range, function.sibling)
      _visit(function.returnType)
      _visit(function.block)

      for argument in function.arguments {
        _visitVariable(argument)
      }
    }

    def _visitStruct(struct StructSymbol) {
      _appendRange(struct.range, struct)

      for variable in struct.variables {
        _visitVariable(variable)
      }
    }

    def _visit(node Node) {
      if node != null {
        for child = node.firstChild; child != null; child = child.nextSibling {
          _visit(child)
        }

        switch node.kind {
          case .NAME { _appendRange(node.range, node.symbol) }
          case .DOT { _appendRange(node.internalRange, node.symbol) }
          case .TYPE { _appendRange(node.range, node.resolvedType.symbol) }
          case .VARIABLE { _visitVariable(node.symbol.asVariable) }
          case .FUNCTION { _visitFunction(node.symbol.asFunction) }
          case .STRUCT { _visitStruct(node.symbol.asStruct) }
        }
      }
    }
  }
}
