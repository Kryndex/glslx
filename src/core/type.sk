namespace GLSLX {
  class Type {
    const symbol Symbol
    const isArrayOf Type
    var _arrayType Type = null

    def rootType Type {
      if isArrayOf != null {
        return isArrayOf.rootType
      }
      return self
    }

    def arrayType Type {
      if _arrayType == null {
        _arrayType = Type.new(null, self)
      }
      return _arrayType
    }

    def toString string {
      if isArrayOf != null {
        return isArrayOf.toString + "[]"
      }
      return symbol.name
    }
  }

  namespace Type {
    const BOOL = StructSymbol.new(-1, null, "bool", null).resolvedType
    const BVEC2 = StructSymbol.new(-2, null, "bvec2", null).resolvedType
    const BVEC3 = StructSymbol.new(-3, null, "bvec3", null).resolvedType
    const BVEC4 = StructSymbol.new(-4, null, "bvec4", null).resolvedType
    const ERROR = StructSymbol.new(-5, null, "<error>", null).resolvedType
    const FLOAT = StructSymbol.new(-6, null, "float", null).resolvedType
    const INT = StructSymbol.new(-7, null, "int", null).resolvedType
    const IVEC2 = StructSymbol.new(-8, null, "ivec2", null).resolvedType
    const IVEC3 = StructSymbol.new(-9, null, "ivec3", null).resolvedType
    const IVEC4 = StructSymbol.new(-10, null, "ivec4", null).resolvedType
    const MAT2 = StructSymbol.new(-11, null, "mat2", null).resolvedType
    const MAT3 = StructSymbol.new(-12, null, "mat3", null).resolvedType
    const MAT4 = StructSymbol.new(-13, null, "mat4", null).resolvedType
    const SAMPLER2D = StructSymbol.new(-14, null, "sampler2D", null).resolvedType
    const SAMPLERCUBE = StructSymbol.new(-15, null, "samplerCube", null).resolvedType
    const VEC2 = StructSymbol.new(-16, null, "vec2", null).resolvedType
    const VEC3 = StructSymbol.new(-17, null, "vec3", null).resolvedType
    const VEC4 = StructSymbol.new(-18, null, "vec4", null).resolvedType
    const VOID = StructSymbol.new(-19, null, "void", null).resolvedType
  }
}
