@import {
  const console dynamic
  const exports dynamic
  const module dynamic
  const process dynamic
  const require dynamic
  const window dynamic
}

namespace GLSLX {
  const outputFormats StringMap<OutputFormat> = {
    "json": .JSON,
    "c++": .CPP,
    "skew": .SKEW,
  }

  const renameSymbols StringMap<RenameSymbols> = {
    "all": .ALL,
    "internal-only": .INTERNAL_ONLY,
    "none": .NONE,
  }

  def printUsage {
    console.log("
Usage: glslx [sources] [flags]

  --output=PATH
    Set the path to the output file. Defaults to standard out.

  --format=FORMAT
    Set the output format, must be json, c++, or skew. Defaults to json.



Advanced:

  --disable-rewriting
    Disable syntax tree rewriting, useful to check for driver bugs.

  --pretty-print
    Format the output nicely instead of minifying it.

  --renaming=MODE
    Valid modes are all, internal-only, or none. Defaults to all.

  --keep-symbols
    Don't inline constants or remove unused symbols.
")
  }

  def printWithColor(color Terminal.Color, text string) {
    Terminal.setColor(color)
    Terminal.write(text)
    Terminal.setColor(.DEFAULT)
  }

  def printError(text string) {
    printWithColor(.RED, "error: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printNote(text string) {
    printWithColor(.GRAY, "note: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printWarning(text string) {
    printWithColor(.MAGENTA, "warning: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printLogWithColor(log Log) {
    var terminalWidth = Terminal.width

    for diagnostic in log.diagnostics {
      if diagnostic.range != null {
        printWithColor(.BOLD, diagnostic.range.locationString + ": ")
      }
      switch diagnostic.kind {
        case .WARNING {
          printWarning(diagnostic.text)
        }
        case .ERROR {
          printError(diagnostic.text)
        }
      }
      if diagnostic.range != null {
        var formatted = diagnostic.range.format(terminalWidth)
        Terminal.print(formatted.line)
        printWithColor(.GREEN, formatted.range + "\n")
      }
      if diagnostic.noteRange != null {
        printWithColor(.BOLD, diagnostic.noteRange.locationString + ": ")
        printNote(diagnostic.noteText)
        var formatted = diagnostic.noteRange.format(terminalWidth)
        Terminal.print(formatted.line)
        printWithColor(.GREEN, formatted.range + "\n")
      }
    }

    # Print the summary
    var hasErrors = log.hasErrors
    var hasWarnings = log.hasWarnings
    var summary = ""
    if hasWarnings {
      summary += "\(log.warningCount) warning\(Log.plural(log.warningCount))"
      if hasErrors {
        summary += " and "
      }
    }
    if hasErrors {
      summary += "\(log.errorCount) error\(Log.plural(log.errorCount))"
    }
    if hasWarnings || hasErrors {
      Terminal.print(summary + " generated")
    }
  }

  @entry
  def main {
    var root = dynamic.typeof(exports) != "undefined" ? exports : (window.GLSLX = {})
    root.compile = (input dynamic, args dynamic) dynamic => {
      args = args || ({} as dynamic)
      var sources List<Source> = []
      if input is string {
        sources.append(Source.new("<stdin>", input))
      } else {
        for i in 0..input.length {
          sources.append(Source.new(input[i].name, input[i].contents))
        }
      }
      var log = Log.new
      var options = CompilerOptions.new
      options.renameSymbols = renameSymbols.get(args.renaming, .ALL)
      if args.disableRewriting { options.compactSyntaxTree = false }
      if args.prettyPrint { options.removeWhitespace = false }
      if args.keepSymbols { options.trimSymbols = false }
      var result = Compiler.compile(log, sources, options)
      return {
        "log": log.toString,
        "output": result != null ? result.output(outputFormats.get(args.format, .JSON)) : null,
      }
    }

    # Also include a small command-line utility
    if dynamic.typeof(require) != "undefined" && dynamic.typeof(module) != "undefined" && require.main == module {
      var args List<string> = process.argv.slice(2)
      var options = CompilerOptions.new
      var sources List<Source> = []
      var outputFormat = OutputFormat.JSON
      var outputPath string = null
      var fs = require("fs")

      for arg in args {
        if !arg.startsWith("-") {
          sources.append(Source.new(arg, fs.readFileSync(arg, "utf8")))
          continue
        }

        switch arg {
          case "--disable-rewriting" {
            options.compactSyntaxTree = false
          }

          case "--pretty-print" {
            options.removeWhitespace = false
          }

          case "--keep-symbols" {
            options.trimSymbols = false
          }

          case "--help", "-h" {
            printUsage
            return
          }

          default {
            if arg.startsWith("--output=") {
              outputPath = arg.slice("--output=".count)
            }

            else if arg.startsWith("--format=") {
              var text = arg.slice("--format=".count)
              if !(text in outputFormats) {
                console.log("invalid output format \"\(text)\"")
                process.exit(1)
              }
              outputFormat = outputFormats[text]
            }

            else if arg.startsWith("--renaming=") {
              var text = arg.slice("--renaming=".count)
              if !(text in renameSymbols) {
                console.log("invalid symbol renaming mode \"\(text)\"")
                process.exit(1)
              }
              options.renameSymbols = renameSymbols[text]
            }

            else {
              console.log("invalid flag \"\(arg)\"")
              process.exit(1)
            }
          }
        }
      }

      if sources.isEmpty {
        printUsage
        return
      }

      var log = Log.new
      var result = Compiler.compile(log, sources, options)

      if result != null {
        if outputPath != null {
          fs.writeFileSync(outputPath, result.output(outputFormat))
          printLogWithColor(log)
        } else {
          process.stdout.write(result.output(outputFormat))
        }
      } else {
        printLogWithColor(log)
        process.exit(1)
      }
    }
  }
}
