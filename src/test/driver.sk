namespace GLSLX.Tests {
  class CompilerTest : Unit.Test {
    var _input string
    var _expected string
    var _options = CompilerOptions.new

    over run {
      rename(compactWhitespace(_input))
      var log = Log.new
      var result = Compiler.compile(log, [Source.new("<stdin>", _input)], _options)
      var output = log.toString
      if result != null && !result.shaders.isEmpty {
        output = "\n".join(result.shaders.map<string>(source => {
          if result.shaders.count != 1 {
            return "[\(source.name)]\n\(source.contents)"
          }
          return source.contents
        }))
      }
      expectString(trimNewlines(_expected), trimNewlines(output))
    }

    def reset CompilerTest {
      _options.compactSyntaxTree = false
      _options.removeWhitespace = false
      _options.renameSymbols = .NONE
      _options.trimSymbols = false
      return self
    }

    def compactSyntaxTree CompilerTest {
      _options.compactSyntaxTree = true
      return self
    }

    def removeWhitespace CompilerTest {
      _options.removeWhitespace = true
      return self
    }

    def renameAll CompilerTest {
      _options.renameSymbols = .ALL
      return self
    }

    def trimSymbols CompilerTest {
      _options.trimSymbols = true
      return self
    }
  }

  def trimNewlines(text string) string {
    var length = text.count
    var start = 0
    var end = length
    while start < length && text[start] == '\n' {
      start++
    }
    while start < end && text[end - 1] == '\n' {
      end--
    }
    return text.slice(start, end)
  }

  def compactWhitespace(text string) string {
    var wasSpace = false
    var result = ""
    for i in 0..text.count {
      var c = text[i]
      if c != '\n' && c != ' ' && c != '\t' {
        result += text.get(i)
        wasSpace = false
      } else if !wasSpace {
        result += " "
        wasSpace = true
      }
    }
    return result
  }

  def test(input string, expected string) CompilerTest {
    return CompilerTest.new(trimNewlines(input), expected).reset
  }

  @entry
  def main int {
    testEmitter
    testFolder
    testMinifier
    testParser
    testResolver
    testRewriter

    var report = Unit.TerminalReport.new
    Unit.Test.runAll(report)
    return report.failedCount
  }
}
