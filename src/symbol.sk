namespace GLSLX {
  namespace Symbol {
    # Keyword modifiers
    const ATTRIBUTE = 1 << 1
    const CONST     = 1 << 2
    const HIGHP     = 1 << 3
    const IN        = 1 << 4
    const INOUT     = 1 << 5
    const LOWP      = 1 << 6
    const MEDIUMP   = 1 << 7
    const OUT       = 1 << 8
    const UNIFORM   = 1 << 9
    const VARYING   = 1 << 10

    # Non-standard modifiers
    const FRAGMENT = 1 << 11
    const VERTEX   = 1 << 12
  }

  class Symbol {
    var range Range
    var name string
    var scope Scope
    var flags = 0

    # Keyword modifiers
    def isAttribute bool { return (flags & ATTRIBUTE) != 0 }
    def isConst bool     { return (flags & CONST) != 0 }
    def isHighp bool     { return (flags & HIGHP) != 0 }
    def isIn bool        { return (flags & IN) != 0 }
    def isInout bool     { return (flags & INOUT) != 0 }
    def isLowp bool      { return (flags & LOWP) != 0 }
    def isMediump bool   { return (flags & MEDIUMP) != 0 }
    def isOut bool       { return (flags & OUT) != 0 }
    def isUniform bool   { return (flags & UNIFORM) != 0 }
    def isVarying bool   { return (flags & VARYING) != 0 }

    # Non-standard modifiers
    def isFragment bool { return (flags & FRAGMENT) != 0 }
    def isVertex bool   { return (flags & VERTEX) != 0 }
  }

  class Global {
    var scope = Scope.new(.GLOBAL, null)
    var objects List<ObjectSymbol> = []
    var functions List<FunctionSymbol> = []
    var variables List<VariableSymbol> = []
  }

  class ObjectSymbol : Symbol {
    var variables List<VariableSymbol> = []
  }

  class FunctionSymbol : Symbol {
    var arguments List<VariableSymbol> = []
    var returnType Node = null
    var body Node = null
  }

  class VariableSymbol : Symbol {
    var type Node = null
    var value Node = null
  }
}
